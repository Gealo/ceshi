
#user  root;
worker_processes  1;

error_log  logs/error.log debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

rtmp {

    log_format Rtmp_Log_Fromat '$remote_addr [$time_local] $command "$app" "$name" "$args" -
$bytes_received $bytes_sent "$pageurl" "$flashver" ($session_readable_time)';

    server {
        listen 1935;
        chunk_size 4000;
        access_log logs/rtmp_access.log Rtmp_Log_Fromat;

        application hls {
            live on;
            on_publish http://127.0.0.1:80/on_publish;
            hls on;
            hls_path path/to/hls;
            hls_fragment 5s;
        }
    }
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    lua_package_path  "path/to/lualib/resty/you_need_package/?.lua;;";

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        access_log  logs/host.access.log  main;

        location ~ \.(js|css) {

            #用于存放相关js和css
            root html/static/;
        }

        location / {

            root html;
        }

        location ~ \.(png|jpg|gif)$ {

            #用于存放直播截屏图片
            root img/;
        }

        location ~ \.(mp4|flv)$ {

            #用于存放直播录制视频还可以放一些其他视频
            root video/;
        }

        location /live/ {
            #反向代理服务器用于解决跨域session的问题，如果要用到获取session的地方只需要在匹配的前缀也加上/live/就是和代理的路径一样即可例如下面的/live/websocket
            default_type text/html;
            #proxy_pass http://127.0.0.1:5000;
        }

        location /live/websocket {

            lua_socket_log_errors off;
            lua_check_client_abort on;
            content_by_lua_file lua/TestWebsocket.lua;

        }

        location /on_publish {
            #用于推流验证确保用户使用代理服务器发送的密钥
            default_type text/html;
            #验证通过数据库就应该防止sql注入这里就用ndk.set_var.set_quote_sql_str()即可
            content_by_lua_block {

                local pwd = nil
                local usr = nil
                ngx.req.read_body()
                local arg = ngx.req.get_post_args()
                for k , v in pairs(arg) do
                    if k == 'pass' then
                        pwd = tostring(v)
                    end
                    if k == 'username' then
                        usr = tostring(v)
                    end
                end
                if pwd == nil or usr == nil then
                    return ngx.exit(403)
                end
                local mysql = require("resty.mysql")
                local db , err = mysql:new()
                if not db then
                    ngx.log(ngx.ERR , "failed to instantiate mysql: " , err)
                    return ngx.exit(500)
                end

                db:set_timeout(1000)

                local ok , err , errcode , sqlstate = db:connect {
                    host = "127.0.0.1",
                    port = 3306,
                    database = "database_name",
                    user = "xxxx",
                    password = "xxxxx"
                }
                ngx.log(ngx.ERR , "pwd : " , pwd , "usr : " , usr)
                if not ok then
                    ngx.log(ngx.ERR , "failed to connect: " , err , ": " , errcode , ": " , sqlstate)
                    return ngx.exit(500)
                end
                local res , err , errcode , sqlstate = db:query("select * from user where username = "..ndk.set_var.set_quote_sql_str(usr).."and password = "..ndk.set_var.set_quote_sql_str(pwd))
                ngx.log(ngx.ERR , "select * from user where username = "..ndk.set_var.set_quote_sql_str(usr).."and password = "..ndk.set_var.set_quote_sql_str(pwd))
                if not res then
                    ngx.log(ngx.ERR , "bad result: " , err , ": " , errcode , ": " , sqlstate)
                    return ngx.exit(500)
                end
                local cjson = require("cjson")
                cjson.encode_empty_table_as_object(false)
                ngx.log(ngx.ERR , cjson.encode(res))
                if cjson.encode(res) == cjson.encode({}) then
                    return ngx.exit(404)
                end
                return ngx.exit(200)
            }
        }

        location ~ ^/api/([-_a-zA-Z0-9/]+) {

            #用于测试lua模块
            default_type text/html;
            content_by_lua_file lua/$1.lua;

        }

        #error_page  404              /404.html;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        #支持php，当然前提要开启php server
        location ~ \.php$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }

    }

}
